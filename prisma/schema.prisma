// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Meal {
  id                 String           @id @default(cuid())
  mealName           String           @db.VarChar(255)
  caloriesPerServing Int
  numberOfServings   Int
  userId             String
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  MealIngredient     MealOnIngredient[]
}

model Ingredient {
  id              String           @id @default(cuid())
  ingredientName  String           @db.VarChar(255)
  unitName        String           @db.VarChar(255)
  caloriesPerUnit Int
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  MealIngredient  MealOnIngredient[]
}

model MealOnIngredient {
  id              String           @id @default(cuid())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
  meal         Meal       @relation(fields: [mealId], references: [id])
  mealId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Meal          Meal[]
  Ingredient    Ingredient[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
